import "strings"

providers = {
	"module.appservice:azurerm": {
		"alias": "",
		"config": {
			"environment": {
				"constant_value": "public",
			},
			"features": [
				{},
			],
		},
		"module_address":      "module.appservice",
		"name":                "azurerm",
		"provider_config_key": "module.appservice:azurerm",
		"version_constraint":  ">= 2.15.0",
	},
}

resources = {
	"module.appservice.azurerm_app_service.app-service": {
		"address": "module.appservice.azurerm_app_service.app-service",
		"config": {
			"app_service_plan_id": {
				"references": [
					"azurerm_app_service_plan.service-plan",
				],
			},
			"https_only": {
				"references": [
					"var.https_only",
				],
			},
			"location": {
				"references": [
					"azurerm_resource_group.appservice-rg",
				],
			},
			"name": {
				"references": [
					"var.app_name",
				],
			},
			"resource_group_name": {
				"references": [
					"azurerm_resource_group.appservice-rg",
				],
			},
			"site_config": [
				{
					"linux_fx_version": {
						"constant_value": "DOTNETCORE|3.1",
					},
				},
			],
			"tags": {
				"references": [
					"var.description",
					"var.environment",
					"var.owner",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.appservice",
		"name":                "app-service",
		"provider_config_key": "module.appservice:azurerm",
		"provisioners":        [],
		"type":                "azurerm_app_service",
	},
	"module.appservice.azurerm_app_service_plan.service-plan": {
		"address": "module.appservice.azurerm_app_service_plan.service-plan",
		"config": {
			"kind": {
				"constant_value": "Linux",
			},
			"location": {
				"references": [
					"azurerm_resource_group.appservice-rg",
				],
			},
			"name": {
				"references": [
					"var.region",
					"var.environment",
					"var.app_name",
				],
			},
			"reserved": {
				"constant_value": true,
			},
			"resource_group_name": {
				"references": [
					"azurerm_resource_group.appservice-rg",
				],
			},
			"sku": [
				{
					"size": {
						"constant_value": "S1",
					},
					"tier": {
						"constant_value": "Standard",
					},
				},
			],
			"tags": {
				"references": [
					"var.description",
					"var.environment",
					"var.owner",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.appservice",
		"name":                "service-plan",
		"provider_config_key": "module.appservice:azurerm",
		"provisioners":        [],
		"type":                "azurerm_app_service_plan",
	},
	"module.appservice.azurerm_resource_group.appservice-rg": {
		"address": "module.appservice.azurerm_resource_group.appservice-rg",
		"config": {
			"location": {
				"references": [
					"var.location",
				],
			},
			"name": {
				"references": [
					"var.region",
					"var.environment",
					"var.app_name",
				],
			},
			"tags": {
				"references": [
					"var.description",
					"var.environment",
					"var.owner",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.appservice",
		"name":                "appservice-rg",
		"provider_config_key": "module.appservice:azurerm",
		"provisioners":        [],
		"type":                "azurerm_resource_group",
	},
}

provisioners = {}

variables = {
	"module.appservice:app_name": {
		"default":        null,
		"description":    "This variable defines the application name used to build resources",
		"module_address": "module.appservice",
		"name":           "app_name",
	},
	"module.appservice:description": {
		"default":        null,
		"description":    "Provide a description of the resource",
		"module_address": "module.appservice",
		"name":           "description",
	},
	"module.appservice:environment": {
		"default":        null,
		"description":    "This variable defines the environment to be built",
		"module_address": "module.appservice",
		"name":           "environment",
	},
	"module.appservice:https_only": {
		"default":        "true",
		"description":    "Whether to allow access via HTTP or not",
		"module_address": "module.appservice",
		"name":           "https_only",
	},
	"module.appservice:location": {
		"default":        "AustraliaEast",
		"description":    "Azure region where the resource group will be created",
		"module_address": "module.appservice",
		"name":           "location",
	},
	"module.appservice:owner": {
		"default":        null,
		"description":    "Specify the owner of the resource",
		"module_address": "module.appservice",
		"name":           "owner",
	},
	"module.appservice:region": {
		"default":        "AusEast",
		"description":    "Azure region where the resource group will be created",
		"module_address": "module.appservice",
		"name":           "region",
	},
}

outputs = {}

module_calls = {
	"appservice": {
		"config": {
			"app_name": {
				"constant_value": "dkappv8",
			},
			"description": {
				"constant_value": "Testing VCS name change 2",
			},
			"environment": {
				"constant_value": "dev",
			},
			"https_only": {
				"constant_value": false,
			},
			"owner": {
				"constant_value": "payments",
			},
		},
		"count":              {},
		"depends_on":         [],
		"for_each":           {},
		"module_address":     "",
		"name":               "appservice",
		"source":             "app.terraform.io/dk/appservice/azure",
		"version_constraint": "0.0.1",
	},
}

strip_index = func(addr) {
	s = strings.split(addr, ".")
	for s as i, v {
		s[i] = strings.split(v, "[")[0]
	}

	return strings.join(s, ".")
}
